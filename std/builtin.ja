fun str_to_ptr(string: str) -> *[]char {
	return $*[]char(string)
}

mix ptr {
	str_to_ptr
}

fun len(string: str) -> int {
	return $int(string)
}

fun str(length: int, pointer: *[]char) -> str {
	return $(length, pointer)
}

fun char_to_int(c: char) -> int {
	return $int(c)
}

fun short_to_int(s: short) -> int {
	return $int(s)
}

mix int {
	char_to_int
	short_to_int
}

fun int_to_char(i: int) -> char {
	return $char(i)
}

fun short_to_char(s: short) -> char {
	return $char(s)
}

mix char {
	int_to_char
	short_to_char
}

fun int_to_short(i: int) -> short {
	return $short(i)
}

fun char_to_short(c: char) -> short {
	return $short(c)
}
mix short {
	int_to_short
	char_to_short
}

fun cstr_len(cstr: *[]char) -> int {
	i = 0
	while @cstr[@i] != 0c {
		i = @i + 1
	}
	return @i
}

fun cstr_to_str(cstr: *[]char) -> str {
	return str(cstr_len(cstr), cstr)
}

fun char_to_str(a: char) -> str {
	[1]s: char
	s[0] = a
	return str(1, s)
}

fun int_to_str(a: int) -> str {
	if a < 0 {
		return concatenate("-", int_to_str(0 - a))
	}
	if a < 10 {
		return char_to_str('0'c + char(a))
	}
	return concatenate(int_to_str(a // 10), int_to_str(a % 10))
}

fun get_arg(idx: int) -> str {
	return cstr_to_str(@Argv[idx])
}

fun nth_bit(a: int, n: int) -> int {
	return a >> n and 0b1
}

use exit(int) -> void
use write(short, *char, int) -> void as c_write
use read(short, *char, int) -> int as c_read

typedef i64  = int
typedef i32  = short
typedef i8   = char
typedef byte = char

fun write(fd:int, s:str) {
	c_write(short(fd), ptr(s)[0], len(s))
}

fun read(fd:int, limit:int) -> str {
	[limit]s: char
	set read_length = c_read(short(fd), s[0], limit)
	return str(read_length, s)
}

const stdin 0
const stdout 1
const stderr 2

fun fputs(fd: int, string: str) -> void {
	write(fd, string)
}

fun fputendl(fd: int) -> void {
	fputs(fd, "\n")
}

fun putendl() -> void {
	fputendl(stdout)
}

fun eputendl() -> void {
	fputendl(stderr)
}

fun parse_int(s: str) -> int {
	idx = 0
	n = 0
	while @idx < len(s) {
		if s[@idx] < '0'c or s[@idx] > '9'c {
			eput`'{s}' is not a valid integer`
			exit(1)
			#FIXME: errors needed or some kind of Result
		}
		n = @n * 10 + int(s[@idx] - '0'c)
		idx = @idx + 1
	}
	return @n
}

fun concatenate(a: str, b: str) -> str {
	[len(a) + len(b)]out: char
	idx = 0
	while @idx < len(a) {
		out[@idx] = a[@idx]
		idx = @idx + 1
	}
	while @idx < len(a) + len(b) {
		out[@idx] = b[@idx - len(a)]
		idx = @idx + 1
	}
	return str(len(a) + len(b), out)
}

fun concatenate3(a: str, b: str, c: str) -> str {
	[len(a) + len(b) + len(c)]out: char
	idx = 0
	while @idx < len(a) {
		out[@idx] = a[@idx]
		idx = @idx + 1
	}
	while @idx < len(a) + len(b) {
		out[@idx] = b[@idx - len(a)]
		idx = @idx + 1
	}
	while @idx < len(a) + len(b) + len(c) {
		out[@idx] = c[@idx - len(a) - len(b)]
		idx = @idx + 1
	}
	return str(len(a) + len(b) + len(c), out)
}

fun default_template_string_formatter(strings: *[]str, values: *[]str, length: int) -> str {
	idx = 0
	running_total = @strings[0]
	while @idx < length {
		running_total = concatenate3(@running_total, @values[@idx], @strings[@idx + 1])
		idx = @idx + 1
	}
	return @running_total
}

fun fput(fd: int, strings: *[]str, values: *[]str, length: int) -> void {
	fputn(fd, strings, values, length)
	fputendl(fd)
}

fun fputn(fd: int, strings: *[]str, values: *[]str, length: int) -> void {
	idx = 0
	fputs(fd, @strings[0])
	while @idx < length {
		fputs(fd, @values[@idx])
		fputs(fd, @strings[@idx + 1])
		idx = @idx + 1
	}
}

fun putn(strings: *[]str, values: *[]str, length: int) -> void {
	fputn(stdout, strings, values, length)
}

fun put(strings: *[]str, values: *[]str, length: int) -> void {
	fput(stdout, strings, values, length)
}

fun eputn(strings: *[]str, values: *[]str, length: int) -> void {
	fputn(stderr, strings, values, length)
}

fun eput(strings: *[]str, values: *[]str, length: int) -> void {
	fput(stderr, strings, values, length)
}


fun puts(string:str) -> void {
	return fputs(stdout, string)
}

fun eputs(string:str) -> void {
	return fputs(stderr, string)
}


fun string_multiplication_provider(a: str, b: int) -> str {
	if b <= 0 {
		return ""
	}
	[len(a)*b]out:char
	idx = 0
	while @idx < len(a)*b {
		out[@idx] = a[@idx%len(a)]
		idx = @idx + 1
	}
	return str(len(a)*b, out)
}
