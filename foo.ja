#!jararaca.py -il


struct Array<T> {
	__length:int
	__allocated:int
	__value:*[]T
	fun __subscript__(self:*Array, idx:int) -> *T {
		return (@self.__value)[idx]
	}
	fun append(self:*Array, value:T) -> *Array {
		self.__length = @self.__length+1
		if @self.__allocated<@self.__length {
			self.__reallocate(@self.__allocated*9//8+1)
		}
		(@self.__value)[@self.__length-1] = value
		return self
	}
	fun __reallocate(self:*Array,new_len:int) {
		[new_len]new_array:T
		idx = 0
		while @idx<@self.__allocated {
			new_array[@idx] = @(@self.__value)[@idx]
			idx=@idx+1
		}
		self.__allocated = new_len
		self.__value = new_array
	}
	fun length(self:*Array) -> int {
		return @self.__length
	}
	fun __init__(self:*Array) {
		self.__length = 0
		self.__allocated = 0
		[0]x:T
		self.__value = x
	}
	fun __str__(self:*Array) -> str {
		if self.length() == 0 {return `[]`}
		s = `[{@self[0]}`
		idx = 1
		while @idx<self.length() {
			s = @s + `, {@self[@idx]}`
			idx=@idx+1
		}
		return `{@s}]`
	}
}



fun main() {
	x:*Array!<int> = Array!<int>()
	(@x).append(5)
	(@x).append(6)
	put`{@x}`
}

