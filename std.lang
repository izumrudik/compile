
const stdin  0
const stdout 1
const stderr 2

fun puts string:str { write(stdout, string) }
fun eputs string:str { write(stderr, string) }
fun fputs fd:int string:str { write(fd, string) }

fun putsln string:str {
	puts(string)
	puts('\n')
}

fun putd a:int{
	if a < 10 {
		puts(str(1, ptr('0123456789')+a))
	} else {
	  	putd(a//10)
	  	putd(a%10)
	}
}

fun noop {}

fun memcpy from:ptr to:ptr length:int {
	idx:int = 0
	while idx < length {
		char:int = load_byte(from+idx)
		save_byte(to+idx,char)
		idx=idx+1
	}
}

fun strcpy string:str to:ptr {
	memcpy(ptr(string),to,len(string))
}
fun save_char char:str to:ptr {
	save_byte(to, load_byte(ptr(char)))
}

fun nth_bit a:int n:int -> int { return ((a >> n) and 1) }

const sizeof[u64]  8
const sizeof[int]  sizeof[u64]
const sizeof[bool] sizeof[u64]
const sizeof[ptr]  sizeof[u64]
const sizeof[str]  sizeof[u64] * 2 


#var random_seed int
#fun rand -> int {
#    save_int(random_seed,(load_int(random_seed) * 1103515245 + 12345) and 2147483647)#@hex
#    return load_int(random_seed);
#}
