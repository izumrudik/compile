
const stdin  0
const stdout 1
const stderr 2

fun puts string:str { write(stdout, string) }
fun eputs string:str { write(stderr, string) }
fun fputs fd:int string:str { write(fd, string) }
fun putendl {
	puts('\n')
}
fun putsln string:str {
	puts(string)
	putendl()
}

fun putd a:int{
	if a < 10 {
		puts(str(1, ptr('0123456789')+a))
	} else {
		putd(a//10)
		putd(a%10)
	}
}
#Timespec
struct Timespec {
        sec:int
        nsec:int
}

fun save_Timespec spec:ptr(Timespec) sec:int nsec:int {
        save_int(spec.sec, sec)
        save_int(spec.nsec, nsec)
}

fun sleep spec:ptr(Timespec) -> int {
	return nanosleep($ptr()(spec),Null)
}

var __delay_local_spec Timespec
fun delay sec:int nsec:int -> int {
	save_Timespec(__delay_local_spec, sec, nsec)
	return sleep(__delay_local_spec)
}


#fcntl - manipulate file descriptor
const O_RDONLY   0    #@hex
const O_WRONLY   1    #@hex
const O_RDWR     2    #@hex
const O_CREAT    64   #@hex
const O_TRUNC    512  #@hex
const O_NONBLOCK 2048 #@hex

const F_SETFL 4
const F_GETFL 3
fun fd_getfl fd:int -> int{
	return fcntl(fd, F_GETFL, 0)#arg is ignored
}
fun fd_setfl fd:int arg:int -> int{
	return fcntl(fd, F_SETFL, arg)
}
#termios
const NCCS 32
struct Termios {
	c_iflag : short      # input mode flags
	c_oflag : short      # output mode flags
	c_cflag : short      # control mode flags
	c_lflag : short      # local mode flags
	c_line  : char       # line discipline
	c_cc    : [NCCS]char # control characters
	c_ispeed: short      # input speed
	c_ospeed: short      # output speed
}
const ICANON 2
const ECHO   8

const VINTR 0
const VQUIT 1
const VERASE 2
const VKILL 3
const VEOF 4
const VTIME 5
const VMIN 6
const VSWTC 7
const VSTART 8
const VSTOP 9
const VSUSP 10
const VEOL 11
const VREPRINT 12
const VDISCARD 13
const VWERASE 14
const VLNEXT 15
const VEOL2 16

const TCSAFLUSH 2
const TCSANOW 0
#std
fun noop {}

fun nth_bit a:int n:int -> int { return ((a >> n) and 1) }

const u64_size  8
const int_size  u64_size
const bool_size u64_size
const ptr_size  u64_size
const str_size  u64_size * 2


var random_seed int
fun rand -> int {
    save_int(random_seed,(load_int(random_seed) * 1103515245 + 12345) and 2147483647)#@hex
    return load_int(random_seed);
}
