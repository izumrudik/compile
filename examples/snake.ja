#!jararaca.py -r
from std.termios import Termios, get_tio, ICANON, ECHO, VMIN, VTIME, TCSAFLUSH, set_tio, TCSANOW
from std.time import Timespec, sleep
from std.random import rand
from std.fcntl import fd_getfl, O_NONBLOCK, fd_setfl

const ROWS 10
const COLS 25

const CELL_EMPTY 0
const CELL_APPLE   1
const CELL_SNAKE 2

struct Point {
	x:int
	y:int
}
struct DIR {
	UP:int = 0
	DOWN:int = 1
	LEFT:int = 2
	RIGHT:int = 3
}
const SNAKE_CAP ROWS * COLS

fun allocate_Point(x:int, y:int) -> *Point {
	a:Point
	a.x=x
	a.y=y
	return a
}

fun allocate_snake() -> *[]Point {
	[SNAKE_CAP]snake:Point
	return snake
}

fun allocate_cells() -> *[COLS][ROWS]int {
	[COLS]cells:[ROWS]int
	col = 0
	while @col < COLS {
		[ROWS]row:int
		cells[@col] = @$*[ROWS]int(row)
		col = @col + 1
	}
	return $*[COLS][ROWS]int(cells)
}

struct Game {
	score:*int = allocate(0)
	head_dir:*int = allocate(DIR.LEFT)
	head_pos:*Point = allocate_Point(0,0)
	snake:*[]Point = allocate_snake()
	snake_begin:*int = allocate(0)
	snake_size:*int = allocate(0)
	cells:*[COLS][ROWS]int = allocate_cells()
}

fun display() {
	puts("Score:")
	putd(@Game.score)
	putendl()
	x = 0
	y = 0
	while @y < ROWS {
		x = 0
		while @x < COLS {
			cell = @Game.cells[@x][@y]
			if @cell == CELL_EMPTY {
				putch('.'c)
			} elif @cell == CELL_APPLE {
				putch('*'c)
			} elif @cell == CELL_SNAKE {
				if @x == @Game.head_pos.x and @y == @Game.head_pos.y {
					putch('S'c)
				} else {
					putch('#'c)
				}
			} else {
				eputs("\nAssertion Failed: unreachable\n")
				exit(1)
			}
			x = @x + 1
		}
		putendl()
		y = @y+1
	}
	puts("WASD to move, Q to quit\n")
}

fun step_point(p:*Point,dir:int) {
	x = @p.x+1#+1, to avoid implementing negative numbers
	y = @p.y+1
	    if dir == DIR.UP    { y=@y-1
	} elif dir == DIR.DOWN  { y=@y+1
	} elif dir == DIR.LEFT  { x=@x-1
	} elif dir == DIR.RIGHT { x=@x+1
	}

	x = @x % COLS
	y = @y % ROWS
	if @x == 0 {x = COLS}
	if @y == 0 {y = ROWS}

	p.x = @x-1
	p.y = @y-1
}

fun spawn_snake(x:int,y:int,dir:int,len:int) {
	Game.head_pos.x = x
	Game.head_pos.y = y
	Game.head_dir = dir
	snake_add(x,y)
	idx = 1
	while @idx < len {
		step_point(Game.head_pos,@Game.head_dir)

		snake_add(@Game.head_pos.x,@Game.head_pos.y)
		idx = @idx + 1
	}
}

fun snake_add(x:int,y:int) {

	if @Game.snake_size >= SNAKE_CAP {
		putsln("\nYOU WON!!!")
		exit(0)
	}

	Game.cells[x][y] = CELL_SNAKE

	cell:Point
	cell.x = x
	cell.y = y
	alias idx = (@Game.snake_begin + @Game.snake_size) % SNAKE_CAP
	Game.snake[idx] = @cell
	Game.snake_size = @Game.snake_size+1
}
fun snake_del() {
	p = @Game.snake[@Game.snake_begin]
	x = @p.x
	y = @p.y
	Game.cells[@x][@y] = CELL_EMPTY

	Game.snake_size = @Game.snake_size-1

	Game.snake_begin = (@Game.snake_begin+1) % SNAKE_CAP
}

fun spawn_apple() {

	x = (rand() << 30) % COLS
	y = (rand() << 30) % ROWS
	while @Game.cells[@x][@y] != CELL_EMPTY {
		x = (rand() << 30) % COLS
		y = (rand() << 30) % ROWS
	}
	Game.cells[@x][@y] = CELL_APPLE
}
fun main() {
	display()
	quit = False

	#configure stdin to read without `enter`
	saved_tio:Termios
	tio:Termios
	get_tio(stdin,saved_tio)
	get_tio(stdin,tio)
	tio.c_lflag = short(!(ICANON or ECHO)) and @tio.c_lflag
	tio.c_cc[VMIN] = 1c
	tio.c_cc[VTIME] = 0c
	set_tio(stdin, TCSAFLUSH, tio)

	# configure to be non-blocking
	arg = fd_getfl(stdin)
	arg = @arg or O_NONBLOCK
	fd_setfl(stdin, @arg)

	#configure timer
	delta_time:Timespec
	delta_time.nsec = 250_000_000

	spawn_snake(5,5,DIR.RIGHT,3)
	spawn_apple()
	#game loop
	while !@quit {
		puts('\x1b[');putd(ROWS+2);puts('A')
		puts('\x1b[');putd(COLS);puts('D')
		display()
		input:char
		read(short(stdin),input,1)
		cmd = @input
		dir = @Game.head_dir
		if @cmd == 'q'c {
			quit = True
	        } elif @cmd == 'w'c and @dir != DIR.DOWN {
			Game.head_dir = DIR.UP
	        } elif @cmd == 'a'c and @dir != DIR.RIGHT {
			Game.head_dir = DIR.LEFT
		} elif @cmd == 's'c and @dir != DIR.UP {
			Game.head_dir = DIR.DOWN
		} elif @cmd == 'd'c and @dir != DIR.LEFT {
			Game.head_dir = DIR.RIGHT
		}


        step_point(Game.head_pos,@Game.head_dir)
		cell = @Game.cells[@Game.head_pos.x][@Game.head_pos.y]
		if @cell == CELL_SNAKE {
			putsln("\nYou Died with Score:")
			putd(@Game.score)
			puts('\n')
			quit = True
		} elif @cell == CELL_APPLE{
			snake_add(@Game.head_pos.x,@Game.head_pos.y)
			Game.score = @Game.score+1
			spawn_apple()
		} elif @cell == CELL_EMPTY{
			snake_del()
			snake_add(@Game.head_pos.x,@Game.head_pos.y)
		}
		#sleep
		if sleep(delta_time) != 0 {
			quit = True
			eputs("Timer went wrong")
		}
	}

	#quitting
	set_tio(stdin, TCSANOW, saved_tio)
}
