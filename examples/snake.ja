#!jararaca.py -r
from std.termios import Termios, ICANON, ECHO, VMIN, VTIME, TCSAFLUSH, TCSANOW
from std.time import Timespec
from std.random import rand
from std.fcntl import fd_getfl, O_NONBLOCK, fd_setfl

const ROWS 10
const COLS 25

const CELL_EMPTY 0
const CELL_APPLE 1
const CELL_SNAKE 2

struct Point {
	x:int
	y:int
}
enum DIR {
	UP
	DOWN
	LEFT
	RIGHT
}

var score int
var head_dir DIR
var head_pos Point
const SNAKE_CAP ROWS * COLS
var snake [SNAKE_CAP]Point
var snake_begin int
var snake_size  int
var cells [COLS][ROWS]int #@enum



fun display(clear_previous:bool) {
	if clear_previous {
		putn`\x1b[{ROWS+2}A\r`
	}
	put`Score: {@score}\x1b[K`
	#clear line to the right of the score (can be removed, but it solves some bugs when terminal is not high enough)
	y = 0
	set l = ROWS*(COLS+1)#+1 for \n
	[l]buffer:char
	idx = 0
	while @y < ROWS {
		x = 0
		while @x < COLS {
			cell = @cells[@x][@y]
			if @cell == CELL_EMPTY {
				buffer[@idx] = "."c
			} elif @cell == CELL_APPLE {
				buffer[@idx] = "*"c
			} elif @cell == CELL_SNAKE {
				if @x == @head_pos.x and @y == @head_pos.y {
					buffer[@idx] = "S"c
				} else {
					buffer[@idx] = "#"c
				}
			} else {
				eputendl()
				eput`Assertion Failed: unreachable`
				exit(1)
			}
			x = @x + 1
			idx = @idx + 1
		}
		buffer[@idx] = "\n"c
		idx = @idx + 1
		y = @y+1
	}
	puts(str(l,buffer))
	put`WASD to move, Q to quit`
}

fun step_point(p:*Point,dir:DIR) {
	x = @p.x
	y = @p.y
	if dir == DIR.UP {
		y=@y-1
	} elif dir == DIR.DOWN {
		y=@y+1
	} elif dir == DIR.LEFT {
		x=@x-1
	} elif dir == DIR.RIGHT {
		x=@x+1
	}

	x = @x % COLS
	y = @y % ROWS
	# FIXME: modulo
	# for some reason C and llvm think that -1//2 = 0, not -1
	# since (a//b)*b+a%b = a
	# a%b = a - b*(a//b)
	# -1%2 = -1 - 2*(0)
	# -1%2 = -1
	# that makes absolutely no sense mathematically
	# quick patch:
	if @x == 0-1 {
		x = COLS-1
	}
	if @y == 0-1 {
		y = ROWS-1
	}

	p.x = @x
	p.y = @y
}

fun snake_add(x:int,y:int) {
	cells[x][y] = CELL_SNAKE
	cell:Point
	cell.x = x
	cell.y = y
	set idx = (@snake_begin + @snake_size) % SNAKE_CAP
	snake[idx] = @cell
	snake_size = @snake_size+1
	if @snake_size >= SNAKE_CAP {
		display(True)
		put`\nYou won!`
		exit(0)
	}
}

fun spawn_snake(x:int,y:int,dir:DIR,len:int) {
	head_pos.x = x
	head_pos.y = y
	head_dir = dir
	snake_add(x,y)
	idx = 1
	while @idx < len {
		step_point(head_pos,@head_dir)

		snake_add(@head_pos.x,@head_pos.y)
		idx = @idx + 1
	}
}

fun snake_del() {
	p = @snake[@snake_begin]
	set x = @p.x
	set y = @p.y
	cells[x][y] = CELL_EMPTY
	snake_size = @snake_size-1
	snake_begin = (@snake_begin+1) % SNAKE_CAP
}

fun spawn_apple() {
	x = rand() % COLS
	y = rand() % ROWS
	while @cells[@x][@y] != CELL_EMPTY {
		x = rand() % COLS
		y = rand() % ROWS
	}
	cells[@x][@y] = CELL_APPLE
}
fun main() {
	display(False)
	quit = False

	#configure stdin to read without `enter`
	set saved_tio = Termios(stdin)

	set tio = Termios(stdin)
	tio.c_lflag = short(!(ICANON or ECHO)) and @tio.c_lflag
	tio.c_cc[VMIN] = 1c
	tio.c_cc[VTIME] = 0c
	tio.apply(stdin, TCSAFLUSH)

	# configure to be non-blocking
	set arg = fd_getfl(stdin)
	fd_setfl(stdin, arg or O_NONBLOCK)

	#configure timer
	set delta_time = Timespec(0,250_000_000)

	spawn_snake(5,5,DIR.RIGHT,3)
	spawn_apple()
	#game loop
	while !@quit {
		display(True)
		set input = read(stdin,1)
		if len(input) == 1 {
			cmd = input[0]
			dir = @head_dir
			if @cmd == 'q'c {
				quit = True
			} elif @cmd == 'w'c and @dir != DIR.DOWN {
				head_dir = DIR.UP
			} elif @cmd == 'a'c and @dir != DIR.RIGHT {
				head_dir = DIR.LEFT
			} elif @cmd == 's'c and @dir != DIR.UP {
				head_dir = DIR.DOWN
			} elif @cmd == 'd'c and @dir != DIR.LEFT {
				head_dir = DIR.RIGHT
			}
		}


        step_point(head_pos,@head_dir)
		cell = @cells[@head_pos.x][@head_pos.y]
		if @cell == CELL_SNAKE {
			put`\nYou Died with Score: {@score}`
			quit = True
		} elif @cell == CELL_APPLE {
			snake_add(@head_pos.x,@head_pos.y)
			score = @score+1
			spawn_apple()
		} elif @cell == CELL_EMPTY {
			snake_del()
			snake_add(@head_pos.x,@head_pos.y)
		}
		#sleep
		if delta_time.sleep() != 0 {
			quit = True
			eput`Timer went wrong`
		}
	}

	#quitting
	saved_tio.apply(stdin, TCSANOW)

}
